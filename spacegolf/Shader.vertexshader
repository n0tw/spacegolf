#version 330 core

// input vertex and UV coordinates, different for all executions of this shader
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal_modelspace;
layout(location = 2) in vec2 vertexUV;
layout (location = 3) in mat4 aInstanceMatrix;
layout (location = 7) in mat4 rotationMatrix;
layout (location = 11) in float scale;

// model view projection matrix 
uniform mat4 P;
uniform mat4 V;
uniform mat4 M;
uniform mat4 lightVP;
uniform int particles =0;

// Task 3.2a VS: propagate vertex coordinates (world space) to fragment shader
out vec3 vertex_position_worldspace;
out vec3 vertex_position_cameraspace;
out vec3 vertex_normal_cameraspace;
out vec2 vertex_UV;
out vec4 vertex_position_lightspace;

void main()
{
    gl_Position = P * V * M * vec4(vertexPosition_modelspace, 1);
    if(particles ==1){
        gl_Position =  P * V * aInstanceMatrix * rotationMatrix * vec4(vertexPosition_modelspace * scale, 1);

        gl_PointSize = 10;
    }
    vertex_position_worldspace = (M * vec4(vertexPosition_modelspace, 1)).xyz;
    vertex_position_cameraspace = (V * M * vec4(vertexPosition_modelspace, 1)).xyz;
    vertex_normal_cameraspace = (V * M * vec4(vertexNormal_modelspace, 0)).xyz; 
    vertex_UV = vertexUV;

    vertex_position_lightspace = lightVP * M * vec4(vertexPosition_modelspace, 1.0f);
}
