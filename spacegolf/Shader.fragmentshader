#version 330 core

in vec3 vertex_position_worldspace;
in vec3 vertex_position_cameraspace;
in vec3 vertex_normal_cameraspace;
in vec2 vertex_UV;
in vec4 vertex_position_lightspace;
           

uniform sampler2D shadowMapSampler;
uniform sampler2D diffuseColorSampler;
uniform sampler2D specularColorSampler;

uniform int useTexture = 0;
uniform int useDistance_sq = 1;
uniform mat4 V;

// Phong 
// light properties
struct Light {
    vec4 La;
    vec4 Ld;
    vec4 Ls;
    vec3 lightPosition_worldspace;
    float power;
};
uniform Light light;


// materials
struct Material {
    vec4 Ka; 
    vec4 Kd;
    vec4 Ks;
    float Ns; 
};
uniform Material mtl;

out vec4 fragmentColor;

void phong(float visibility);
float ShadowCalculation(vec4 fragPositionLightspace);

void main() {   
    
    // Task 4.3
    float shadow  = ShadowCalculation(vertex_position_lightspace);

    float visibility = 1.0f - shadow;
    phong(visibility);
}


float ShadowCalculation(vec4 vertexPositionLightspace){
    float shadow;

    // Perspective devide to bring coordinates in range[-1, 1]
    vec3 projCoords = vertexPositionLightspace.xyz / vertexPositionLightspace.w;

    // Since the depth map values are in range[0, 1]
    projCoords = projCoords * 0.5 + 0.5;

    float closestDepth = texture(shadowMapSampler, projCoords.xy).r;
    float currentDepth = projCoords.z;

    shadow = currentDepth > closestDepth ? 1.0 : 0.0;

    // Correcting the quantization problem
    float bias = 0.005;
    shadow = currentDepth - bias > closestDepth ? 1.0 : 0.0;
        
    return shadow;
}


void phong(float visibility) {
   
    vec4 _Ks = mtl.Ks;
    vec4 _Kd = mtl.Kd;
    vec4 _Ka = mtl.Ka;
    float _Ns = mtl.Ns;

    if (useTexture == 1) {
        _Ks = vec4(texture(specularColorSampler, vertex_UV).rgb, 0.2);
        _Kd = vec4(texture(diffuseColorSampler, vertex_UV).rgb, 0.5);
        _Ka = vec4(0.5f, 0.5f, 0.5f, 1.0);
        _Ns = 10;
    }
    
    // model ambient intensity (Ia)
    vec4 Ia = light.La * _Ka;

    // model diffuse intensity (Id)
    vec3 N = normalize(vertex_normal_cameraspace); 
    vec3 L = normalize((V * vec4(light.lightPosition_worldspace, 1)).xyz - vertex_position_cameraspace);
    float cosTheta = clamp(dot(L, N), 0, 1);
    vec4 Id = light.Ld * _Kd * cosTheta; 

    // model specular intensity (Is)
    vec3 R = reflect(-L, N);
    vec3 E = normalize(- vertex_position_cameraspace);
    float cosAlpha = clamp(dot(E, R), 0, 1);
    float specular_factor = pow(cosAlpha, _Ns);
    vec4 Is = light.Ls * _Ks * specular_factor;

    //model the light distance effect
    float distance = length(light.lightPosition_worldspace - vertex_position_worldspace);

    float dd=distance/30; //Thelw o fwtismos sto plane kai sto target na epirreazetai ligotero apo thn apostash tou fwtos apo ta fragments tou.
    if (useDistance_sq == 1){
        dd = distance;      //Thelw pio realistiko apotelesma gia tous planhtew, ta feggaria kai ta particles alla epeidh exw megales apostaseis thelw to fws na diaxeetai pio omoiomorfa ap' oti an xrhsimopoiousa dd =distance*distance
    }

    fragmentColor = vec4(
        Ia + 
        visibility * Id * light.power / dd 
        +
        visibility * Is * light.power / dd
        );
}